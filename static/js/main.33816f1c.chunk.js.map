{"version":3,"sources":["visualizers/SpectralCurve.js","visualizers/SphereVisualizer.js","SceneManager.js","AudioAnalyser.js","App.js","serviceWorker.js","index.js"],"names":["SpectralCurve","_ref","_ref$startAngle","startAngle","Object","classCallCheck","this","numControlPoints","numCurvePoints","curvePoints","j","point","THREE","angle","Math","PI","direction","cos","sin","push","curve","points","getPoints","geometry","setFromPoints","material","color","linewidth","curveObject","spectrum","_ref2","pointBandwidth","floor","length","i","binAmplitude","newPoint","clone","multiplyScalar","set","x","y","z","verticesNeedUpdate","SphereVisualizer","scene","numCurves","radius","treadmillSpeed","curves","group","getSceneObject","position","lerp","add","rotateX","_this","clockDelta","forEach","animate","_curve$getSceneObject","_curve$getSceneObject2","scale","max","sqrt","pow","rotateY","EffectModulator","effect","modulator","params","SceneManager","canvas","camera","context","getContext","renderer","antialias","effectModulators","BloomEffect","ChromaticAberrationEffect","_ref3","rms","minOffset","maxOffset","offset","ScanlineEffect","effects","map","composer","EffectComposer","passes","RenderPass","construct","EffectPass","concat","toConsumableArray","BlurPass","kernelSize","KernelSize","VERY_SMALL","renderToScreen","addPass","bind","clock","visualizers","width","height","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","getDelta","visualizer","effectModulator","render","AudioAnalyser","emptyArray","getAudioAnalyser","then","analyser","rawSpectrum","Uint8Array","frequencyBinCount","Array","rawWave","wave","navigator","mediaDevices","getUserMedia","audio","stream","AudioContext","source","createMediaStreamSource","createAnalyser","fftSize","connect","_this2","getByteFrequencyData","value","index","getByteTimeDomainData","n","squareSum","normalized","App","props","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","state","react_default","a","createElement","id","ref","setState","window","innerWidth","innerHeight","updateDimensions","addEventListener","sceneManager","current","animationFrameRequest","requestAnimationFrame","getSpectrum","_analyser$getWave","getWave","cancelAnimationFrame","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33816f1c.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nclass SpectralCurve {\n  constructor({startAngle = 0}) {\n    this.numControlPoints = 10;\n    this.numCurvePoints = 100;\n    const curvePoints = [];\n    for (let j = 0; j < this.numControlPoints; j++) {\n      const point = new THREE.Vector3();\n      const angle = startAngle + 2 * Math.PI * j / this.numControlPoints;\n      point.direction = new THREE.Vector3(Math.cos(angle), Math.sin(angle), 0);\n      curvePoints.push(point);\n    }\n    const curve = new THREE.CatmullRomCurve3(curvePoints, true);\n    const points = curve.getPoints(this.numCurvePoints);\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    const material = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n      linewidth: 3,\n    });\n    const curveObject = new THREE.Line(geometry, material);\n\n    this.curve = curve;\n    this.curveObject = curveObject;\n  }\n  animate({spectrum}) {\n    // Update curve geometry\n    const pointBandwidth = Math.floor(spectrum.length / this.numCurvePoints);\n    for (let i = 0; i < this.curve.points.length; i++) {\n      const binAmplitude = spectrum[i * pointBandwidth];\n      const point = this.curve.points[i];\n      const newPoint = point.direction.clone().multiplyScalar(binAmplitude);\n      point.set(newPoint.x, newPoint.y, newPoint.z);\n    }\n    this.curveObject.geometry.setFromPoints(this.curve.getPoints(this.numCurvePoints));\n    this.curveObject.geometry.verticesNeedUpdate = true;\n  }\n  getSceneObject() {\n    return this.curveObject;\n  }\n}\n\nexport {SpectralCurve};\n","import * as THREE from 'three';\n\nimport {SpectralCurve} from './SpectralCurve';\n\nclass SphereVisualizer {\n  constructor({scene}) {\n    this.numCurves = 10;\n    this.radius = 1;\n    this.treadmillSpeed = 0.1;\n\n    this.curves = [];\n    this.group = new THREE.Group();\n    for (let i = 0; i < this.numCurves; i++) {\n      const startAngle = 0;\n      const curve = new SpectralCurve({scene, startAngle});\n      curve.getSceneObject().position.z = THREE.Math.lerp(-this.radius, this.radius, i / this.numCurves);\n      this.curves.push(curve);\n      this.group.add(curve.getSceneObject());\n    }\n\n    this.group.rotateX(Math.PI / 2);\n    scene.add(this.group);\n  }\n  animate({spectrum, clockDelta}) {\n    if (!spectrum.length) {\n      return;\n    }\n    this.curves.forEach(curve => {\n      curve.animate({spectrum});\n      // Move curve along treadmill\n      let {x, y, z} = curve.getSceneObject().position;\n      curve.getSceneObject().position.set(x, y, z + clockDelta * this.treadmillSpeed);\n      if (z > this.radius) {\n        curve.getSceneObject().position.set(x, y, -this.radius);\n      }\n\n      ({x, y, z} = curve.getSceneObject().position);\n      const scale = Math.max(2 * this.radius * Math.sqrt(this.radius**2 - z**2), 0.01);\n      curve.getSceneObject().scale.set(scale, scale, 1);\n    });\n\n    this.group.rotateX(clockDelta * 0.1);\n    this.group.rotateY(clockDelta * 0.1);\n  }\n}\n\nexport {SphereVisualizer};\n","import * as THREE from 'three';\nimport {EffectComposer, EffectPass, BlurPass, RenderPass, KernelSize, BloomEffect, ScanlineEffect, ChromaticAberrationEffect} from 'postprocessing';\n// import {BoxVisualizer} from './visualizers/BoxVisualizer';\nimport {PieVisualizer} from './visualizers/PieVisualizer';\nimport {ParticleSystem} from './visualizers/ParticleSystem';\nimport {TunnelVisualizer} from './visualizers/TunnelVisualizer';\nimport {SphereVisualizer} from './visualizers/SphereVisualizer';\n\nclass EffectModulator {\n  constructor({effect, modulator}) {\n    this.effect = effect;\n    this.modulator = modulator || (() => {});\n  }\n  animate(params) {\n    this.modulator(this.effect, params);\n  }\n}\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(76, 1, 0.1, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      context,\n      antialias: true,\n    });\n\n    this.effectModulators = [\n      new EffectModulator({\n        effect: new BloomEffect(),\n      }),\n      new EffectModulator({\n        effect: new ChromaticAberrationEffect(),\n        modulator(effect, {rms}) {\n          const minOffset = new THREE.Vector2(0, 0);\n          const maxOffset = new THREE.Vector2(0.05, 0.05);\n          const offset = minOffset.lerp(maxOffset, rms);\n          effect.offset = offset;\n        },\n      }),\n      new EffectModulator({\n        effect: new ScanlineEffect(),\n      }),\n    ];\n\n    const effects = this.effectModulators.map(modulator => modulator.effect);\n\n    const composer = new EffectComposer(renderer);\n\n    const passes = [\n      new RenderPass(scene, camera),\n      new EffectPass(camera, ...effects),\n      new BlurPass({\n        kernelSize: KernelSize.VERY_SMALL,\n      }),\n    ];\n\n    passes[passes.length - 1].renderToScreen = true;\n    passes.map(composer.addPass.bind(composer));\n\n    this.composer = composer;\n    this.clock = new THREE.Clock();\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    camera.position.z = 5;\n\n    this.visualizers = [\n      // new PieVisualizer({scene}),\n      // new ParticleSystem({scene}),\n      // new TunnelVisualizer({scene}),\n      new SphereVisualizer({scene}),\n    ];\n  }\n  animate(params) {\n    const {width, height} = params;\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.composer.setSize(width, height);\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n    // TODO adding to params seems to mix concerns; who should own the clock?\n    params.clockDelta = this.clock.getDelta();\n    this.visualizers.forEach(visualizer => visualizer.animate(params));\n    this.effectModulators.forEach(effectModulator => effectModulator.animate(params));\n    this.composer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","class AudioAnalyser {\n  constructor() {\n    this.emptyArray = [];\n    this.getAudioAnalyser().then(analyser => {\n      this.analyser = analyser;\n\n      this.rawSpectrum = new Uint8Array(this.analyser.frequencyBinCount);\n      this.spectrum = new Array(this.rawSpectrum.length);\n\n      this.rawWave = new Uint8Array(this.analyser.frequencyBinCount);\n      this.wave = new Array(this.rawWave.length);\n    });\n  }\n  async getAudioAnalyser() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    const context = new AudioContext();\n    const source = context.createMediaStreamSource(stream);\n    const analyser = context.createAnalyser();\n    analyser.fftSize = 256;\n    source.connect(analyser);\n    return analyser;\n  }\n  getSpectrum() {\n    let spectrum;\n    if (this.analyser) {\n      this.analyser.getByteFrequencyData(this.rawSpectrum);\n      this.rawSpectrum.forEach((value, index) => this.spectrum[index] = value / 255);\n      spectrum = this.spectrum;\n    } else {\n      spectrum = this.emptyArray;\n    }\n    return {\n      spectrum,\n    };\n  }\n  getWave() {\n    let wave, rms;\n    if (this.analyser) {\n      this.analyser.getByteTimeDomainData(this.rawWave);\n      const n = this.rawWave.length;\n      let squareSum = 0;\n      for (let i = 0; i < n; i++) {\n        const sample = this.rawWave[i];\n        const normalized = sample / 255;\n        this.wave[i] = normalized;\n        squareSum += (normalized - .5)**2;\n      }\n      wave = this.wave;\n      rms = Math.sqrt(squareSum / n);\n    } else {\n      wave = this.emptyArray;\n      rms = 0;\n    }\n    return {\n      wave,\n      rms,\n    };\n  }\n}\n\nexport {AudioAnalyser};\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport {SceneManager} from './SceneManager';\nimport {AudioAnalyser} from './AudioAnalyser';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n\n    const analyser = new AudioAnalyser();\n\n    const sceneManager = new SceneManager({\n      canvas: this.canvasRef.current,\n    });\n\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      const {spectrum} = analyser.getSpectrum();\n      const {wave, rms} = analyser.getWave();\n      sceneManager.animate({\n        spectrum,\n        wave,\n        rms,\n        width: this.state.width,\n        height: this.state.height,\n      });\n    }\n    animate();\n  }\n  componentWillUnmount() {\n    if (this.animationFrameRequest) {\n      cancelAnimationFrame(this.animationFrameRequest);\n    }\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}