{"version":3,"sources":["Visualizer.js","SceneManager.js","AudioAnalyser.js","App.js","serviceWorker.js","index.js"],"names":["Visualizer","_ref","_this","this","scene","Object","classCallCheck","objects","_loop","i","_loop2","j","_this$objects","geometry","THREE","material","color","cube","edges","edgeMaterial","linewidth","these","forEach","object","position","x","scale","y","push","apply","add","spectrum","_ref2","length","Math","pow","z","SceneManager","canvas","camera","context","getContext","renderer","visualizers","width","height","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","visualizer","animate","render","AudioAnalyser","getAudioAnalyser","then","analyser","navigator","mediaDevices","getUserMedia","audio","stream","AudioContext","source","createMediaStreamSource","createAnalyser","fftSize","connect","rawSpectrum","Uint8Array","frequencyBinCount","getByteFrequencyData","Array","value","index","App","props","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","state","react_default","a","createElement","id","ref","setState","window","innerWidth","innerHeight","_this2","updateDimensions","addEventListener","bind","sceneManager","current","animationFrameRequest","requestAnimationFrame","getSpectrum","cancelAnimationFrame","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e527e71d.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nclass Visualizer {\n  constructor({scene}) {\n    const xCount = 5;\n    const yCount = 4;\n    this.objects = [];\n\n    for (let i = 0; i < xCount; i++) {\n      for (let j = 0; j < yCount; j++) {\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\n        const material = new THREE.MeshBasicMaterial({color: 0x003300});\n        const cube = new THREE.Mesh(geometry, material);\n\n        const edges = new THREE.EdgesGeometry(geometry);\n        const edgeMaterial = new THREE.LineBasicMaterial({\n          color: 0xffffff,\n          linewidth: 10,\n        });\n        const wireframe = new THREE.LineSegments(edges, edgeMaterial);\n        const these = [cube, wireframe];\n        these.forEach(object => {\n          const scale = 2;\n          const xOffset = scale * xCount / 2;\n          const yOffset = scale * yCount / 2;\n          object.position.x = i * scale - xOffset;\n          object.position.y = j * scale - yOffset;\n        });\n        this.objects.push(...these);\n      }\n    }\n\n    this.objects.forEach(object => {\n      scene.add(object);\n    });\n  }\n\n  animate({spectrum}) {\n    if (!spectrum.length) {\n      return;\n    }\n    const offset = 1;\n    const gain = 3;\n    const power = 5;\n    this.objects.forEach(object => {\n      object.scale.x = offset + gain * Math.pow(spectrum[50], power);\n      object.scale.y = offset + gain * Math.pow(spectrum[100], power);\n      object.scale.z = offset + gain * Math.pow(spectrum[150], power);\n      // object.rotation.x += 0.01;\n      // object.rotation.y += 0.01;\n      // object.rotation.z += 0.01;\n    });\n  }\n}\n\nexport {Visualizer};\n","import * as THREE from 'three';\nimport {Visualizer} from './Visualizer';\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(76, 1, 0.1, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({canvas, context});\n\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    camera.position.z = 5;\n\n    this.visualizers = [new Visualizer({scene})];\n  }\n  animate({width, height, spectrum}) {\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n\n    this.visualizers.forEach(visualizer => visualizer.animate({spectrum}));\n    this.renderer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","class AudioAnalyser {\n  constructor() {\n    this.getAudioAnalyser().then(analyser => this.analyser = analyser);\n  }\n  async getAudioAnalyser() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    const context = new AudioContext();\n    const source = context.createMediaStreamSource(stream);\n    const analyser = context.createAnalyser();\n    analyser.fftSize = 512;\n    source.connect(analyser);\n    return analyser;\n  }\n  getSpectrum() {\n    let rawSpectrum = [];\n    if (this.analyser) {\n      rawSpectrum = new Uint8Array(this.analyser.frequencyBinCount);\n      this.analyser.getByteFrequencyData(rawSpectrum);\n    }\n    const spectrum = new Array(rawSpectrum.length);\n    rawSpectrum.forEach((value, index) => spectrum[index] = value / 255);\n    return spectrum;\n  }\n}\n\nexport {AudioAnalyser};\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport {SceneManager} from './SceneManager';\nimport {AudioAnalyser} from './AudioAnalyser';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n\n    const analyser = new AudioAnalyser();\n\n    const sceneManager = new SceneManager({\n      canvas:this.canvasRef.current,\n    });\n\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      sceneManager.animate({\n        spectrum: analyser.getSpectrum(),\n        width: this.state.width,\n        height: this.state.height,\n      });\n    }\n    animate();\n  }\n  componentWillUnmount() {\n    if (this.animationFrameRequest) {\n      cancelAnimationFrame(this.animationFrameRequest);\n    }\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}