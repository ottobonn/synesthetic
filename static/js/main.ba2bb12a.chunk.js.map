{"version":3,"sources":["visualizers/PieVisualizer.js","visualizers/ParticleSystem.js","visualizers/TunnelVisualizer.js","SceneManager.js","AudioAnalyser.js","App.js","serviceWorker.js","index.js"],"names":["PieVisualizer","_ref","scene","Object","classCallCheck","this","slices","i","sliceShape","THREE","startOffset","Math","PI","angularBounds","sliceStart","sliceEnd","absarc","geometry","depth","steps","bevelEnabled","curveSegments","material","color","mesh","add","push","spectrum","_ref2","length","numSlices","sliceBandwidth","floor","forEach","slice","index","binAmplitude","max","log","scale","x","y","ParticleSystem","particles","particleMaterial","size","map","load","blending","transparent","boundingSphere","getRandomCoordinate","mapLinear","random","vertices","z","particle","containsPoint","r","clone","divideScalar","heading","particleSystem","rms","rotation","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","multiplyScalar","set","err","return","verticesNeedUpdate","TunnelVisualizer","numControlPoints","numCurvePoints","numCurves","treadmillLength","treadmillSpeed","curves","_this$makeCurve","makeCurve","startAngle","curve","curveObject","position","lerp","curvePoints","j","point","angle","direction","cos","sin","points","getPoints","setFromPoints","linewidth","_this","_ref3","clock","pointBandwidth","clockDelta","getDelta","_ref4","newPoint","_curveObject$position","EffectModulator","effect","modulator","params","SceneManager","canvas","camera","context","getContext","renderer","antialias","effectModulators","BloomEffect","ChromaticAberrationEffect","minOffset","maxOffset","offset","ScanlineEffect","effects","composer","EffectComposer","passes","RenderPass","construct","EffectPass","concat","toConsumableArray","BlurPass","kernelSize","KernelSize","VERY_SMALL","renderToScreen","addPass","bind","visualizers","width","height","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","visualizer","animate","effectModulator","render","AudioAnalyser","emptyArray","getAudioAnalyser","then","analyser","rawSpectrum","Uint8Array","frequencyBinCount","Array","rawWave","wave","navigator","mediaDevices","getUserMedia","audio","stream","AudioContext","source","createMediaStreamSource","createAnalyser","fftSize","connect","_this2","getByteFrequencyData","getByteTimeDomainData","n","squareSum","normalized","pow","sqrt","App","props","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","state","react_default","a","createElement","id","ref","setState","window","innerWidth","innerHeight","updateDimensions","addEventListener","sceneManager","current","animationFrameRequest","requestAnimationFrame","getSpectrum","_analyser$getWave","getWave","cancelAnimationFrame","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"6VAEMA,aACJ,SAAAA,EAAAC,GAAqB,IAARC,EAAQD,EAARC,MAAQC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,GAKnB,IAHA,IACMM,EAAS,GAENC,EAAI,EAAGA,EAHE,IAGaA,IAAK,CAClC,IAAMC,EAAa,IAAIC,IAEjBC,GAAeC,KAAKC,GAAK,EACzBC,EAAgB,EAAIF,KAAKC,GAPf,IAWVE,EAAaJ,EAAcG,EAAgBN,EAH3B,KAIhBQ,EAAWD,GAHID,EAAgB,MAKrCL,EAAWQ,OAAO,EAAG,EAAG,GAAKD,EAASD,GAAY,GAClDN,EAAWQ,OAAO,EAAG,EAAG,EAAGF,EAAYC,GAAU,GAEjD,IAAME,EAAW,IAAIR,IAAsBD,EAAY,CACrDU,MAAO,GACPC,MAAQ,EACRC,cAAc,EACdC,cAAe,KAGXC,EAAW,IAAIb,IAAwB,CAACc,MAAO,WAE/CC,EAAO,IAAIf,IAAWQ,EAAUK,GACtCpB,EAAMuB,IAAID,GACVlB,EAAOoB,KAAKF,GAGdnB,KAAKC,OAASA,yDAGI,IAAXqB,EAAWC,EAAXD,SACP,GAAKA,EAASE,OAAd,CAGA,IAAMC,EAAYzB,KAAKC,OAAOuB,OACxBE,EAAiBpB,KAAKqB,MAAML,EAASE,OAASC,GACpDzB,KAAKC,OAAO2B,QAAQ,SAACC,EAAOC,GAC1B,IAAMC,EAAezB,KAAK0B,IAAI1B,KAAK2B,IAAI,GAAKX,EAASQ,EAAQJ,IAAkB,MAC/EG,EAAMK,MAAMC,EAAIJ,EAChBF,EAAMK,MAAME,EAAIL,cC9ChBM,aACJ,SAAAA,EAAAzC,GAAqB,IAARC,EAAQD,EAARC,MAAQC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,GAgBnB,IAdA,IACMC,EAAY,IAAIlC,IAChBmC,EAAmB,IAAInC,IAAqB,CAChDc,MAAO,SACPsB,KAAM,IACNC,KAAK,IAAIrC,KAAsBsC,KAAK,iCACpCC,SAAUvC,IACVwC,aAAa,IAITC,EAAiB,IAAIzC,IAAa,IAAIA,IAAc,EAAG,EAAG,GADzC,IAEjB0C,EAAsB,kBAAM1C,IAAW2C,UAAUzC,KAAK0C,SAAU,EAAG,GAFlD,QAIhBV,EAAUW,SAASzB,OAdJ,KAc4B,CAChD,IAAMW,EAAIW,IACJV,EAAIU,IACJI,EAAIJ,IACJK,EAAW,IAAI/C,IAAc+B,EAAGC,EAAGc,GACzC,GAAIL,EAAeO,cAAcD,GAAW,CAC1C,IAAME,EAAIF,EAASG,QAAQC,aAAaJ,EAAS3B,UACjD2B,EAASK,QAAUH,EACnBf,EAAUW,SAAS5B,KAAK8B,IAI5BnD,KAAKyD,eAAiB,IAAIrD,IAAakC,EAAWC,GAClD1C,EAAMuB,IAAIpB,KAAKyD,gBAEfzD,KAAK6C,eAAiBA,yDAET,IAANa,EAAMnC,EAANmC,IACP1D,KAAKyD,eAAeE,SAASvB,GAAK,KAClC,IAAMxB,EAAWZ,KAAKyD,eAAe7C,SAFxBgD,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGb,QAAAC,EAAAC,EAAuBrD,EAASqC,SAAhCiB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA0C,KAA/BT,EAA+Ba,EAAAM,MACxCnB,EAAS/B,IAAI+B,EAASK,QAAQF,QAAQiB,eAAeb,IAChD1D,KAAK6C,eAAeO,cAAcD,IACrCA,EAASqB,IAAI,EAAG,EAAG,IANV,MAAAC,GAAAZ,GAAA,EAAAC,EAAAW,EAAA,YAAAb,GAAA,MAAAK,EAAAS,QAAAT,EAAAS,SAAA,WAAAb,EAAA,MAAAC,GASb9D,KAAKyD,eAAe7C,SAAS+D,oBAAqB,WC3ChDC,aACJ,SAAAA,EAAAhF,GAAqB,IAARC,EAAQD,EAARC,MAAQC,OAAAC,EAAA,EAAAD,CAAAE,KAAA4E,GACnB5E,KAAK6E,iBAAmB,GACxB7E,KAAK8E,eAAiB,IACtB9E,KAAK+E,UAAY,GACjB/E,KAAKgF,gBAAkB,GACvBhF,KAAKiF,eAAiB,EAEtBjF,KAAKkF,OAAS,GACd,IAAK,IAAIhF,EAAI,EAAGA,EAAIF,KAAK+E,UAAW7E,IAAK,CACvC,IADuCiF,EAEVnF,KAAKoF,UAAU,CAACC,WAD1B,IACZC,EAFgCH,EAEhCG,MAAOC,EAFyBJ,EAEzBI,YACdA,EAAYC,SAAStC,EAAI9C,IAAWqF,MAAMzF,KAAKgF,gBAAkB,EAAGhF,KAAKgF,gBAAkB,EAAG9E,EAAIF,KAAK+E,WACvGlF,EAAMuB,IAAImE,GACVvF,KAAKkF,OAAO7D,KAAK,CAACiE,QAAOC,0EAK3B,IAFsB,IAAbF,EAAa9D,EAAb8D,WACHK,EAAc,GACXC,EAAI,EAAGA,EAAI3F,KAAK6E,iBAAkBc,IAAK,CAC9C,IAAMC,EAAQ,IAAIxF,IACZyF,EAAQR,EAAa,EAAI/E,KAAKC,GAAKoF,EAAI3F,KAAK6E,iBAClDe,EAAME,UAAY,IAAI1F,IAAcE,KAAKyF,IAAIF,GAAQvF,KAAK0F,IAAIH,GAAQ,GACtEH,EAAYrE,KAAKuE,GAEnB,IAAMN,EAAQ,IAAIlF,IAAuBsF,GAAa,GAChDO,EAASX,EAAMY,UAAUlG,KAAK8E,gBAC9BlE,GAAW,IAAIR,KAAuB+F,cAAcF,GACpDhF,EAAW,IAAIb,IAAwB,CAC3Cc,MAAO,SACPkF,UAAW,IAGb,MAAO,CAACd,QAAOC,YADK,IAAInF,IAAWQ,EAAUK,uCAGpB,IAAAoF,EAAArG,KAAlBsB,EAAkBgF,EAAlBhF,SAAUiF,EAAQD,EAARC,MACjB,GAAKjF,EAASE,OAAd,CAGA,IAAMgF,EAAiBlG,KAAKqB,MAAML,EAASE,OAASxB,KAAK8E,gBACnD2B,EAAaF,EAAMG,WACzB1G,KAAKkF,OAAOtD,QAAQ,SAAA+E,GAElB,IAF4C,IAAxBrB,EAAwBqB,EAAxBrB,MAAOC,EAAiBoB,EAAjBpB,YAElBrF,EAAI,EAAGA,EAAIoF,EAAMW,OAAOzE,OAAQtB,IAAK,CAC5C,IAAM6B,EAAeT,EAASpB,EAAIsG,GAC5BZ,EAAQN,EAAMW,OAAO/F,GACrB0G,EAAWhB,EAAME,UAAUxC,QAAQiB,eAAexC,GACxD6D,EAAMpB,IAAIoC,EAASzE,EAAGyE,EAASxE,EAAGwE,EAAS1D,GAG7CqC,EAAY3E,SAASuF,cAAcb,EAAMY,UAAUG,EAAKvB,iBACxDS,EAAY3E,SAAS+D,oBAAqB,EAVE,IAAAkC,EAa1BtB,EAAYC,SAAvBrD,EAbqC0E,EAarC1E,EAAGC,EAbkCyE,EAalCzE,EAAGc,EAb+B2D,EAa/B3D,EACbqC,EAAYC,SAAShB,IAAIrC,EAAGC,EAAGc,EAAIuD,EAAaJ,EAAKpB,gBACjD/B,EAAImD,EAAKrB,gBAAkB,GAC7BO,EAAYC,SAAShB,IAAIrC,EAAGC,GAAIiE,EAAKrB,gBAAkB,eCpDzD8B,aACJ,SAAAA,EAAAlH,GAAiC,IAApBmH,EAAoBnH,EAApBmH,OAAQC,EAAYpH,EAAZoH,UAAYlH,OAAAC,EAAA,EAAAD,CAAAE,KAAA8G,GAC/B9G,KAAK+G,OAASA,EACd/G,KAAKgH,UAAYA,GAAc,iEAEzBC,GACNjH,KAAKgH,UAAUhH,KAAK+G,OAAQE,YAI1BC,aACJ,SAAAA,EAAA3F,GAAsB,IAAT4F,EAAS5F,EAAT4F,OAASrH,OAAAC,EAAA,EAAAD,CAAAE,KAAAkH,GACpB,IAAMrH,EAAQ,IAAIO,IACZgH,EAAS,IAAIhH,IAAwB,GAAI,EAAG,GAAK,KACjDiH,EAAUF,EAAOG,WAAW,UAC5BC,EAAW,IAAInH,IAAoB,CACvC+G,SACAE,UACAG,WAAW,IAGbxH,KAAKyH,iBAAmB,CACtB,IAAIX,EAAgB,CAClBC,OAAQ,IAAIW,MAEd,IAAIZ,EAAgB,CAClBC,OAAQ,IAAIY,IACZX,UAFkB,SAERD,EAFQT,GAEO,IAAN5C,EAAM4C,EAAN5C,IACXkE,EAAY,IAAIxH,IAAc,EAAG,GACjCyH,EAAY,IAAIzH,IAAc,IAAM,KACpC0H,EAASF,EAAUnC,KAAKoC,EAAWnE,GACzCqD,EAAOe,OAASA,KAGpB,IAAIhB,EAAgB,CAClBC,OAAQ,IAAIgB,OAIhB,IAAMC,EAAUhI,KAAKyH,iBAAiBhF,IAAI,SAAAuE,GAAS,OAAIA,EAAUD,SAE3DkB,EAAW,IAAIC,IAAeX,GAE9BY,EAAS,CACb,IAAIC,IAAWvI,EAAOuH,GADTtH,OAAAuI,EAAA,EAAAvI,CAETwI,IAFS,CAEElB,GAFFmB,OAAAzI,OAAA0I,EAAA,EAAA1I,CAEakI,KAC1B,IAAIS,IAAS,CACXC,WAAYC,IAAWC,cAI3BT,EAAOA,EAAO3G,OAAS,GAAGqH,gBAAiB,EAC3CV,EAAO1F,IAAIwF,EAASa,QAAQC,KAAKd,IAEjCjI,KAAKiI,SAAWA,EAChBjI,KAAKuG,MAAQ,IAAInG,IACjBJ,KAAKmH,OAASA,EACdnH,KAAKH,MAAQA,EACbG,KAAKoH,OAASA,EACdpH,KAAKuH,SAAWA,EAChBH,EAAO5B,SAAStC,EAAI,EAEpBlD,KAAKgJ,YAAc,CACjB,IAAIrJ,EAAc,CAACE,UACnB,IAAIwC,EAAe,CAACxC,UACpB,IAAI+E,EAAiB,CAAC/E,+DAGlBoH,GAAQ,IACPgC,EAAiBhC,EAAjBgC,MAAOC,EAAUjC,EAAViC,OACVD,IAAUjJ,KAAKmJ,WAAaD,IAAWlJ,KAAKoJ,aAC9CpJ,KAAKiI,SAASoB,QAAQJ,EAAOC,GAC7BlJ,KAAKuH,SAAS8B,QAAQJ,EAAOC,GAC7BlJ,KAAKoH,OAAOkC,OAASL,EAAQC,EAC7BlJ,KAAKoH,OAAOmC,yBACZvJ,KAAKmJ,UAAYF,EACjBjJ,KAAKoJ,WAAaF,GAGpBjC,EAAOV,MAAQvG,KAAKuG,MACpBvG,KAAKgJ,YAAYpH,QAAQ,SAAA4H,GAAU,OAAIA,EAAWC,QAAQxC,KAC1DjH,KAAKyH,iBAAiB7F,QAAQ,SAAA8H,GAAe,OAAIA,EAAgBD,QAAQxC,KACzEjH,KAAKiI,SAAS0B,OAAO3J,KAAKH,MAAOG,KAAKoH,0CCzFpCwC,aACJ,SAAAA,IAAc,IAAAvD,EAAArG,KAAAF,OAAAC,EAAA,EAAAD,CAAAE,KAAA4J,GACZ5J,KAAK6J,WAAa,GAClB7J,KAAK8J,mBAAmBC,KAAK,SAAAC,GAC3B3D,EAAK2D,SAAWA,EAEhB3D,EAAK4D,YAAc,IAAIC,WAAW7D,EAAK2D,SAASG,mBAChD9D,EAAK/E,SAAW,IAAI8I,MAAM/D,EAAK4D,YAAYzI,QAE3C6E,EAAKgE,QAAU,IAAIH,WAAW7D,EAAK2D,SAASG,mBAC5C9D,EAAKiE,KAAO,IAAIF,MAAM/D,EAAKgE,QAAQ7I,6MAIhB+I,UAAUC,aAAaC,aAAa,CACvDC,OAAO,kBADHC,SAGAtD,EAAU,IAAIuD,aACdC,EAASxD,EAAQyD,wBAAwBH,IACzCX,EAAW3C,EAAQ0D,kBAChBC,QAAU,IACnBH,EAAOI,QAAQjB,qBACRA,2IAEK,IACR1I,EADQ4J,EAAAlL,KASZ,OAPIA,KAAKgK,UACPhK,KAAKgK,SAASmB,qBAAqBnL,KAAKiK,aACxCjK,KAAKiK,YAAYrI,QAAQ,SAAC0C,EAAOxC,GAAR,OAAkBoJ,EAAK5J,SAASQ,GAASwC,EAAQ,MAC1EhD,EAAWtB,KAAKsB,UAEhBA,EAAWtB,KAAK6J,WAEX,CACLvI,8CAIF,IAAIgJ,EAAM5G,EACV,GAAI1D,KAAKgK,SAAU,CACjBhK,KAAKgK,SAASoB,sBAAsBpL,KAAKqK,SAGzC,IAFA,IAAMgB,EAAIrL,KAAKqK,QAAQ7I,OACnB8J,EAAY,EACPpL,EAAI,EAAGA,EAAImL,EAAGnL,IAAK,CAC1B,IACMqL,EADSvL,KAAKqK,QAAQnK,GACA,IAC5BF,KAAKsK,KAAKpK,GAAKqL,EACfD,GAAShL,KAAAkL,IAAKD,EAAa,GAAK,GAElCjB,EAAOtK,KAAKsK,KACZ5G,EAAMpD,KAAKmL,KAAKH,EAAYD,QAE5Bf,EAAOtK,KAAK6J,WACZnG,EAAM,EAER,MAAO,CACL4G,OACA5G,gBCFSgI,cAhDb,SAAAA,EAAYC,GAAO,IAAAtF,EAAA,OAAAvG,OAAAC,EAAA,EAAAD,CAAAE,KAAA0L,IACjBrF,EAAAvG,OAAA8L,EAAA,EAAA9L,CAAAE,KAAAF,OAAA+L,EAAA,EAAA/L,CAAA4L,GAAAI,KAAA9L,KAAM2L,KACDI,UAAYC,IAAMC,YACvB5F,EAAK6F,MAAQ,CACXjD,MAAO,EACPC,OAAQ,GALO7C,wEASjB,OACE8F,EAAAC,EAAAC,cAAA,UAAQC,GAAG,OAAOC,IAAKvM,KAAK+L,uDAI9B/L,KAAKwM,SAAS,CAACvD,MAAOwD,OAAOC,WAAYxD,OAAQuD,OAAOE,0DAEvC,IAAAzB,EAAAlL,KACjBA,KAAK4M,mBACLH,OAAOI,iBAAiB,SAAU7M,KAAK4M,iBAAiB7D,KAAK/I,OAE7D,IAAMgK,EAAW,IAAIJ,EAEfkD,EAAe,IAAI5F,EAAa,CACpCC,OAAQnH,KAAK+L,UAAUgB,WAGT,SAAVtD,IACJyB,EAAK8B,sBAAwBC,sBAAsBxD,GAD/B,IAEbnI,EAAY0I,EAASkD,cAArB5L,SAFa6L,EAGAnD,EAASoD,UAAtB9C,EAHa6C,EAGb7C,KAAM5G,EAHOyJ,EAGPzJ,IACboJ,EAAarD,QAAQ,CACnBnI,WACAgJ,OACA5G,MACAuF,MAAOiC,EAAKgB,MAAMjD,MAClBC,OAAQgC,EAAKgB,MAAMhD,SAGvBO,kDAGIzJ,KAAKgN,uBACPK,qBAAqBrN,KAAKgN,uBAE5BP,OAAOa,oBAAoB,SAAUtN,KAAK4M,iBAAiB7D,KAAK/I,cA7ClDuN,aCMEC,QACW,cAA7Bf,OAAOgB,SAASC,UAEe,UAA7BjB,OAAOgB,SAASC,UAEhBjB,OAAOgB,SAASC,SAASC,MACvB,2DCZNC,IAASjE,OAAOwC,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBxD,WACrBA,UAAUyD,cAAcC,MAAMlE,KAAK,SAAAmE,GACjCA,EAAaC","file":"static/js/main.ba2bb12a.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nclass PieVisualizer {\n  constructor({scene}) {\n\n    const numSlices = 100;\n    const slices = [];\n\n    for (let i = 0; i < numSlices; i++) {\n      const sliceShape = new THREE.Shape();\n\n      const startOffset = -Math.PI / 2;\n      const angularBounds = 2 * Math.PI / numSlices;\n      const angularMargin = 0.001;\n      const angularWidth = angularBounds - 2 * angularMargin;\n\n      const sliceStart = startOffset + angularBounds * i + angularMargin;\n      const sliceEnd = sliceStart + angularWidth;\n\n      sliceShape.absarc(0, 0, 0.5, sliceEnd,sliceStart, true);\n      sliceShape.absarc(0, 0, 1, sliceStart, sliceEnd, false);\n\n      const geometry = new THREE.ExtrudeGeometry(sliceShape, {\n        depth: 0.2,\n        steps : 1,\n        bevelEnabled: false,\n        curveSegments: 50,\n      });\n\n      const material = new THREE.MeshBasicMaterial({color: 0xffffff});\n\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      slices.push(mesh);\n    }\n\n    this.slices = slices;\n  }\n\n  animate({spectrum}) {\n    if (!spectrum.length) {\n      return;\n    }\n    const numSlices = this.slices.length;\n    const sliceBandwidth = Math.floor(spectrum.length / numSlices);\n    this.slices.forEach((slice, index) => {\n      const binAmplitude = Math.max(Math.log(10 * spectrum[index * sliceBandwidth]), 0.001);\n      slice.scale.x = binAmplitude;\n      slice.scale.y = binAmplitude;\n    });\n  }\n}\n\nexport {PieVisualizer};\n","import * as THREE from 'three';\n\nclass ParticleSystem {\n  constructor({scene}) {\n    // create the particle variables\n    const particleCount = 2000;\n    const particles = new THREE.Geometry();\n    const particleMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 0.05,\n      map: new THREE.TextureLoader().load('/assets/textures/particle.png'),\n      blending: THREE.AdditiveBlending,\n      transparent: true,\n    });\n\n    const boundingRadius = 10;\n    const boundingSphere = new THREE.Sphere(new THREE.Vector3(0, 0, 0), boundingRadius);\n    const getRandomCoordinate = () => THREE.Math.mapLinear(Math.random(), 0, 1, -boundingRadius, boundingRadius);\n\n    while (particles.vertices.length < particleCount) {\n      const x = getRandomCoordinate();\n      const y = getRandomCoordinate();\n      const z = getRandomCoordinate();\n      const particle = new THREE.Vector3(x, y, z);\n      if (boundingSphere.containsPoint(particle)) {\n        const r = particle.clone().divideScalar(particle.length());\n        particle.heading = r;\n        particles.vertices.push(particle);\n      }\n    }\n\n    this.particleSystem = new THREE.Points(particles, particleMaterial);\n    scene.add(this.particleSystem);\n\n    this.boundingSphere = boundingSphere;\n  }\n  animate({rms}) {\n    this.particleSystem.rotation.y += 0.0001;\n    const geometry = this.particleSystem.geometry;\n    for (const particle of geometry.vertices) {\n      particle.add(particle.heading.clone().multiplyScalar(rms));\n      if (!this.boundingSphere.containsPoint(particle)) {\n        particle.set(0, 0, 0);\n      }\n    }\n    this.particleSystem.geometry.verticesNeedUpdate = true;\n  }\n}\n\nexport {ParticleSystem};\n","import * as THREE from 'three';\n\nclass TunnelVisualizer {\n  constructor({scene}) {\n    this.numControlPoints = 10;\n    this.numCurvePoints = 100;\n    this.numCurves = 50;\n    this.treadmillLength = 50;\n    this.treadmillSpeed = 2;\n\n    this.curves = [];\n    for (let i = 0; i < this.numCurves; i++) {\n      const startAngle = 0;\n      const {curve, curveObject} = this.makeCurve({startAngle});\n      curveObject.position.z = THREE.Math.lerp(-this.treadmillLength / 2, this.treadmillLength / 2, i / this.numCurves);\n      scene.add(curveObject);\n      this.curves.push({curve, curveObject});\n    }\n  }\n  makeCurve({startAngle}) {\n    const curvePoints = [];\n    for (let j = 0; j < this.numControlPoints; j++) {\n      const point = new THREE.Vector3();\n      const angle = startAngle + 2 * Math.PI * j / this.numControlPoints;\n      point.direction = new THREE.Vector3(Math.cos(angle), Math.sin(angle), 0);\n      curvePoints.push(point);\n    }\n    const curve = new THREE.CatmullRomCurve3(curvePoints, true);\n    const points = curve.getPoints(this.numCurvePoints);\n    const geometry = new THREE.BufferGeometry().setFromPoints(points);\n    const material = new THREE.LineBasicMaterial({\n      color: 0xffffff,\n      linewidth: 3,\n    });\n    const curveObject = new THREE.Line(geometry, material);\n    return {curve, curveObject};\n  }\n  animate({spectrum, clock}) {\n    if (!spectrum.length) {\n      return;\n    }\n    const pointBandwidth = Math.floor(spectrum.length / this.numCurvePoints);\n    const clockDelta = clock.getDelta();\n    this.curves.forEach(({curve, curveObject}) => {\n      // Update curve geometry\n      for (let i = 0; i < curve.points.length; i++) {\n        const binAmplitude = spectrum[i * pointBandwidth];\n        const point = curve.points[i];\n        const newPoint = point.direction.clone().multiplyScalar(binAmplitude);\n        point.set(newPoint.x, newPoint.y, newPoint.z);\n      }\n\n      curveObject.geometry.setFromPoints(curve.getPoints(this.numCurvePoints));\n      curveObject.geometry.verticesNeedUpdate = true;\n      \n      // Move curve along treadmill\n      const {x, y, z} = curveObject.position;\n      curveObject.position.set(x, y, z + clockDelta * this.treadmillSpeed);\n      if (z > this.treadmillLength / 2) {\n        curveObject.position.set(x, y, -this.treadmillLength / 2);\n      }\n    });\n  }\n}\n\nexport {TunnelVisualizer};\n","import * as THREE from 'three';\nimport {EffectComposer, EffectPass, BlurPass, RenderPass, KernelSize, BloomEffect, ScanlineEffect, ChromaticAberrationEffect} from 'postprocessing';\n// import {BoxVisualizer} from './visualizers/BoxVisualizer';\nimport {PieVisualizer} from './visualizers/PieVisualizer';\nimport {ParticleSystem} from './visualizers/ParticleSystem';\nimport {TunnelVisualizer} from './visualizers/TunnelVisualizer';\n\nclass EffectModulator {\n  constructor({effect, modulator}) {\n    this.effect = effect;\n    this.modulator = modulator || (() => {});\n  }\n  animate(params) {\n    this.modulator(this.effect, params);\n  }\n}\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(76, 1, 0.1, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      context,\n      antialias: true,\n    });\n\n    this.effectModulators = [\n      new EffectModulator({\n        effect: new BloomEffect(),\n      }),\n      new EffectModulator({\n        effect: new ChromaticAberrationEffect(),\n        modulator(effect, {rms}) {\n          const minOffset = new THREE.Vector2(0, 0);\n          const maxOffset = new THREE.Vector2(0.05, 0.05);\n          const offset = minOffset.lerp(maxOffset, rms);\n          effect.offset = offset;\n        },\n      }),\n      new EffectModulator({\n        effect: new ScanlineEffect(),\n      }),\n    ];\n\n    const effects = this.effectModulators.map(modulator => modulator.effect);\n\n    const composer = new EffectComposer(renderer);\n\n    const passes = [\n      new RenderPass(scene, camera),\n      new EffectPass(camera, ...effects),\n      new BlurPass({\n        kernelSize: KernelSize.VERY_SMALL,\n      }),\n    ];\n\n    passes[passes.length - 1].renderToScreen = true;\n    passes.map(composer.addPass.bind(composer));\n\n    this.composer = composer;\n    this.clock = new THREE.Clock();\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    camera.position.z = 5;\n\n    this.visualizers = [\n      new PieVisualizer({scene}),\n      new ParticleSystem({scene}),\n      new TunnelVisualizer({scene}),\n    ];\n  }\n  animate(params) {\n    const {width, height} = params;\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.composer.setSize(width, height);\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n    // TODO adding to params seems to mix concerns; who should own the clock?\n    params.clock = this.clock;\n    this.visualizers.forEach(visualizer => visualizer.animate(params));\n    this.effectModulators.forEach(effectModulator => effectModulator.animate(params));\n    this.composer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","class AudioAnalyser {\n  constructor() {\n    this.emptyArray = [];\n    this.getAudioAnalyser().then(analyser => {\n      this.analyser = analyser;\n\n      this.rawSpectrum = new Uint8Array(this.analyser.frequencyBinCount);\n      this.spectrum = new Array(this.rawSpectrum.length);\n\n      this.rawWave = new Uint8Array(this.analyser.frequencyBinCount);\n      this.wave = new Array(this.rawWave.length);\n    });\n  }\n  async getAudioAnalyser() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    const context = new AudioContext();\n    const source = context.createMediaStreamSource(stream);\n    const analyser = context.createAnalyser();\n    analyser.fftSize = 256;\n    source.connect(analyser);\n    return analyser;\n  }\n  getSpectrum() {\n    let spectrum;\n    if (this.analyser) {\n      this.analyser.getByteFrequencyData(this.rawSpectrum);\n      this.rawSpectrum.forEach((value, index) => this.spectrum[index] = value / 255);\n      spectrum = this.spectrum;\n    } else {\n      spectrum = this.emptyArray;\n    }\n    return {\n      spectrum,\n    };\n  }\n  getWave() {\n    let wave, rms;\n    if (this.analyser) {\n      this.analyser.getByteTimeDomainData(this.rawWave);\n      const n = this.rawWave.length;\n      let squareSum = 0;\n      for (let i = 0; i < n; i++) {\n        const sample = this.rawWave[i];\n        const normalized = sample / 255;\n        this.wave[i] = normalized;\n        squareSum += (normalized - .5)**2;\n      }\n      wave = this.wave;\n      rms = Math.sqrt(squareSum / n);\n    } else {\n      wave = this.emptyArray;\n      rms = 0;\n    }\n    return {\n      wave,\n      rms,\n    };\n  }\n}\n\nexport {AudioAnalyser};\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport {SceneManager} from './SceneManager';\nimport {AudioAnalyser} from './AudioAnalyser';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n\n    const analyser = new AudioAnalyser();\n\n    const sceneManager = new SceneManager({\n      canvas: this.canvasRef.current,\n    });\n\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      const {spectrum} = analyser.getSpectrum();\n      const {wave, rms} = analyser.getWave();\n      sceneManager.animate({\n        spectrum,\n        wave,\n        rms,\n        width: this.state.width,\n        height: this.state.height,\n      });\n    }\n    animate();\n  }\n  componentWillUnmount() {\n    if (this.animationFrameRequest) {\n      cancelAnimationFrame(this.animationFrameRequest);\n    }\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}