{"version":3,"sources":["visualizers/PieVisualizer.js","SceneManager.js","AudioAnalyser.js","App.js","serviceWorker.js","index.js"],"names":["PieVisualizer","_ref","scene","Object","classCallCheck","this","slices","i","sliceShape","THREE","startOffset","Math","PI","angularBounds","sliceStart","sliceEnd","moveTo","absarc","lineTo","geometry","depth","steps","bevelEnabled","curveSegments","material","color","mesh","add","push","spectrum","_ref2","length","numSlices","sliceBandwidth","floor","forEach","slice","index","binAmplitude","max","log","scale","x","y","SceneManager","canvas","camera","context","getContext","renderer","antialias","effects","BloomEffect","ChromaticAberrationEffect","offset","ScanlineEffect","composer","EffectComposer","passes","RenderPass","BlurPass","kernelSize","KernelSize","SMALL","construct","EffectPass","concat","renderToScreen","map","addPass","bind","clock","position","z","visualizers","width","height","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","visualizer","animate","render","AudioAnalyser","_this","getAudioAnalyser","then","analyser","navigator","mediaDevices","getUserMedia","audio","stream","AudioContext","source","createMediaStreamSource","createAnalyser","fftSize","connect","rawSpectrum","Uint8Array","frequencyBinCount","getByteFrequencyData","Array","value","App","props","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","state","react_default","a","createElement","id","ref","setState","window","innerWidth","innerHeight","_this2","updateDimensions","addEventListener","sceneManager","current","animationFrameRequest","requestAnimationFrame","getSpectrum","cancelAnimationFrame","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95b36d02.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nclass PieVisualizer {\n  constructor({scene}) {\n\n    const numSlices = 100;\n    const slices = [];\n\n    for (let i = 0; i < numSlices; i++) {\n      const sliceShape = new THREE.Shape();\n\n      const startOffset = -Math.PI / 2;\n      const angularBounds = 2 * Math.PI / numSlices;\n      const angularMargin = 0.001;\n      const angularWidth = angularBounds - 2 * angularMargin;\n\n      const sliceStart = startOffset + angularBounds * i + angularMargin;\n      const sliceEnd = sliceStart + angularWidth;\n\n      sliceShape.moveTo(0, 0);\n      sliceShape.absarc(0, 0, 1, sliceStart, sliceEnd, false);\n      sliceShape.lineTo(0, 0);\n\n      const geometry = new THREE.ExtrudeGeometry(sliceShape, {\n        depth: 0.2,\n        steps : 1,\n        bevelEnabled: false,\n        curveSegments: 50,\n      });\n\n      const material = new THREE.MeshBasicMaterial({color: 0xffffff});\n\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      slices.push(mesh);\n    }\n\n    this.slices = slices;\n  }\n\n  animate({spectrum}) {\n    if (!spectrum.length) {\n      return;\n    }\n    const numSlices = this.slices.length;\n    const sliceBandwidth = Math.floor(spectrum.length / numSlices);\n    this.slices.forEach((slice, index) => {\n      const binAmplitude = Math.max(Math.log(10 * spectrum[index * sliceBandwidth]), 0.01);\n      slice.scale.x = binAmplitude;\n      slice.scale.y = binAmplitude;\n    });\n  }\n}\n\nexport {PieVisualizer};\n","import * as THREE from 'three';\nimport {EffectComposer, EffectPass, BlurPass, RenderPass, KernelSize, BloomEffect, ScanlineEffect, ChromaticAberrationEffect} from 'postprocessing';\n// import {BoxVisualizer} from './visualizers/BoxVisualizer';\nimport {PieVisualizer} from './visualizers/PieVisualizer';\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(76, 1, 0.1, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      context,\n      antialias: true,\n    });\n\n    const effects = [\n      new BloomEffect(),\n      new ChromaticAberrationEffect({\n        offset: new THREE.Vector2(0.004, 0.004),\n      }),\n      new ScanlineEffect(),\n    ];\n\n    const composer = new EffectComposer(renderer);\n\n    const passes = [\n      new RenderPass(scene, camera),\n      new BlurPass({\n        kernelSize: KernelSize.SMALL,\n      }),\n      new EffectPass(camera, ...effects),\n    ];\n\n    passes[passes.length - 1].renderToScreen = true;\n    passes.map(composer.addPass.bind(composer));\n\n    this.composer = composer;\n    this.clock = new THREE.Clock();\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    camera.position.z = 5;\n\n    this.visualizers = [new PieVisualizer({scene})];\n  }\n  animate({width, height, spectrum}) {\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.composer.setSize(width, height);\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n    this.visualizers.forEach(visualizer => visualizer.animate({\n      width,\n      height,\n      spectrum,\n    }));\n    this.composer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","class AudioAnalyser {\n  constructor() {\n    this.getAudioAnalyser().then(analyser => this.analyser = analyser);\n  }\n  async getAudioAnalyser() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    const context = new AudioContext();\n    const source = context.createMediaStreamSource(stream);\n    const analyser = context.createAnalyser();\n    analyser.fftSize = 512;\n    source.connect(analyser);\n    return analyser;\n  }\n  getSpectrum() {\n    let rawSpectrum = [];\n    if (this.analyser) {\n      rawSpectrum = new Uint8Array(this.analyser.frequencyBinCount);\n      this.analyser.getByteFrequencyData(rawSpectrum);\n    }\n    const spectrum = new Array(rawSpectrum.length);\n    rawSpectrum.forEach((value, index) => spectrum[index] = value / 255);\n    return spectrum;\n  }\n}\n\nexport {AudioAnalyser};\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport {SceneManager} from './SceneManager';\nimport {AudioAnalyser} from './AudioAnalyser';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n\n    const analyser = new AudioAnalyser();\n\n    const sceneManager = new SceneManager({\n      canvas:this.canvasRef.current,\n    });\n\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      sceneManager.animate({\n        spectrum: analyser.getSpectrum(),\n        width: this.state.width,\n        height: this.state.height,\n      });\n    }\n    animate();\n  }\n  componentWillUnmount() {\n    if (this.animationFrameRequest) {\n      cancelAnimationFrame(this.animationFrameRequest);\n    }\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}