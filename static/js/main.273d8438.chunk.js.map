{"version":3,"sources":["visualizers/PieVisualizer.js","visualizers/ParticleSystem.js","SceneManager.js","AudioAnalyser.js","App.js","serviceWorker.js","index.js"],"names":["PieVisualizer","_ref","scene","Object","classCallCheck","this","slices","i","sliceShape","THREE","startOffset","Math","PI","angularBounds","sliceStart","sliceEnd","absarc","geometry","depth","steps","bevelEnabled","curveSegments","material","color","mesh","add","push","spectrum","_ref2","length","numSlices","sliceBandwidth","floor","forEach","slice","index","binAmplitude","max","log","scale","x","y","ParticleSystem","particles","particleMaterial","size","map","load","blending","transparent","boundingSphere","getRandomCoordinate","mapLinear","random","vertices","z","particle","containsPoint","particleSystem","rotation","EffectModulator","effect","modulator","params","SceneManager","canvas","camera","context","getContext","renderer","antialias","effectModulators","BloomEffect","ChromaticAberrationEffect","_ref3","rms","minOffset","maxOffset","offset","lerp","ScanlineEffect","effects","composer","EffectComposer","passes","RenderPass","construct","EffectPass","concat","toConsumableArray","BlurPass","kernelSize","KernelSize","VERY_SMALL","renderToScreen","addPass","bind","clock","position","visualizers","width","height","lastWidth","lastHeight","setSize","aspect","updateProjectionMatrix","visualizer","animate","effectModulator","render","AudioAnalyser","_this","getAudioAnalyser","then","analyser","navigator","mediaDevices","getUserMedia","audio","stream","AudioContext","source","createMediaStreamSource","createAnalyser","fftSize","connect","rawSpectrum","Uint8Array","frequencyBinCount","getByteFrequencyData","Array","value","rawWave","getByteTimeDomainData","wave","n","squareSum","reduce","total","sample","pow","sqrt","App","props","possibleConstructorReturn","getPrototypeOf","call","canvasRef","React","createRef","state","react_default","a","createElement","id","ref","setState","window","innerWidth","innerHeight","_this2","updateDimensions","addEventListener","sceneManager","current","animationFrameRequest","requestAnimationFrame","getSpectrum","_analyser$getWave","getWave","cancelAnimationFrame","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.273d8438.chunk.js","sourcesContent":["import * as THREE from 'three';\n\nclass PieVisualizer {\n  constructor({scene}) {\n\n    const numSlices = 100;\n    const slices = [];\n\n    for (let i = 0; i < numSlices; i++) {\n      const sliceShape = new THREE.Shape();\n\n      const startOffset = -Math.PI / 2;\n      const angularBounds = 2 * Math.PI / numSlices;\n      const angularMargin = 0.001;\n      const angularWidth = angularBounds - 2 * angularMargin;\n\n      const sliceStart = startOffset + angularBounds * i + angularMargin;\n      const sliceEnd = sliceStart + angularWidth;\n\n      sliceShape.absarc(0, 0, 0.5, sliceEnd,sliceStart, true);\n      sliceShape.absarc(0, 0, 1, sliceStart, sliceEnd, false);\n\n      const geometry = new THREE.ExtrudeGeometry(sliceShape, {\n        depth: 0.2,\n        steps : 1,\n        bevelEnabled: false,\n        curveSegments: 50,\n      });\n\n      const material = new THREE.MeshBasicMaterial({color: 0xffffff});\n\n      const mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      slices.push(mesh);\n    }\n\n    this.slices = slices;\n  }\n\n  animate({spectrum}) {\n    if (!spectrum.length) {\n      return;\n    }\n    const numSlices = this.slices.length;\n    const sliceBandwidth = Math.floor(spectrum.length / numSlices);\n    this.slices.forEach((slice, index) => {\n      const binAmplitude = Math.max(Math.log(10 * spectrum[index * sliceBandwidth]), 0.001);\n      slice.scale.x = binAmplitude;\n      slice.scale.y = binAmplitude;\n    });\n  }\n}\n\nexport {PieVisualizer};\n","import * as THREE from 'three';\n\nclass ParticleSystem {\n  constructor({scene}) {\n    // create the particle variables\n    const particleCount = 1000;\n    const particles = new THREE.Geometry();\n    const particleMaterial = new THREE.PointsMaterial({\n      color: 0xffffff,\n      size: 0.05,\n      map: new THREE.TextureLoader().load('/assets/textures/particle.png'),\n      blending: THREE.AdditiveBlending,\n      transparent: true,\n    });\n\n    const boundingRadius = 5;\n    const boundingSphere = new THREE.Sphere(new THREE.Vector3(0, 0, 0), boundingRadius);\n    const getRandomCoordinate = () => THREE.Math.mapLinear(Math.random(), 0, 1, -boundingRadius, boundingRadius);\n\n    while (particles.vertices.length < particleCount) {\n      const x = getRandomCoordinate();\n      const y = getRandomCoordinate();\n      const z = getRandomCoordinate();\n      const particle = new THREE.Vector3(x, y, z);\n      if (boundingSphere.containsPoint(particle)) {\n        particles.vertices.push(particle);\n      }\n    }\n\n    this.particleSystem = new THREE.Points(particles, particleMaterial);\n    scene.add(this.particleSystem);\n  }\n  animate() {\n    this.particleSystem.rotation.y += 0.0001;\n  }\n}\n\nexport {ParticleSystem};\n","import * as THREE from 'three';\nimport {EffectComposer, EffectPass, BlurPass, RenderPass, KernelSize, BloomEffect, ScanlineEffect, ChromaticAberrationEffect} from 'postprocessing';\n// import {BoxVisualizer} from './visualizers/BoxVisualizer';\nimport {PieVisualizer} from './visualizers/PieVisualizer';\nimport {ParticleSystem} from './visualizers/ParticleSystem';\n\nclass EffectModulator {\n  constructor({effect, modulator}) {\n    this.effect = effect;\n    this.modulator = modulator || (() => {});\n  }\n  animate(params) {\n    this.modulator(this.effect, params);\n  }\n}\n\nclass SceneManager {\n  constructor({canvas}) {\n    const scene = new THREE.Scene();\n    const camera = new THREE.PerspectiveCamera(76, 1, 0.1, 1000);\n    const context = canvas.getContext('webgl2');\n    const renderer = new THREE.WebGLRenderer({\n      canvas,\n      context,\n      antialias: true,\n    });\n\n    this.effectModulators = [\n      new EffectModulator({\n        effect: new BloomEffect(),\n      }),\n      new EffectModulator({\n        effect: new ChromaticAberrationEffect(),\n        modulator(effect, {rms}) {\n          const minOffset = new THREE.Vector2(0, 0);\n          const maxOffset = new THREE.Vector2(0.05, 0.05);\n          const offset = minOffset.lerp(maxOffset, rms);\n          effect.offset = offset;\n        },\n      }),\n      new EffectModulator({\n        effect: new ScanlineEffect(),\n      }),\n    ];\n\n    const effects = this.effectModulators.map(modulator => modulator.effect);\n\n    const composer = new EffectComposer(renderer);\n\n    const passes = [\n      new RenderPass(scene, camera),\n      new EffectPass(camera, ...effects),\n      new BlurPass({\n        kernelSize: KernelSize.VERY_SMALL,\n      }),\n    ];\n\n    passes[passes.length - 1].renderToScreen = true;\n    passes.map(composer.addPass.bind(composer));\n\n    this.composer = composer;\n    this.clock = new THREE.Clock();\n    this.canvas = canvas;\n    this.scene = scene;\n    this.camera = camera;\n    this.renderer = renderer;\n    camera.position.z = 5;\n\n    this.visualizers = [\n      new PieVisualizer({scene}),\n      new ParticleSystem({scene}),\n    ];\n  }\n  animate(params) {\n    const {width, height} = params;\n    if (width !== this.lastWidth || height !== this.lastHeight) {\n      this.composer.setSize(width, height);\n      this.renderer.setSize(width, height);\n      this.camera.aspect = width / height;\n      this.camera.updateProjectionMatrix();\n      this.lastWidth = width;\n      this.lastHeight = height;\n    }\n    this.visualizers.forEach(visualizer => visualizer.animate(params));\n    this.effectModulators.forEach(effectModulator => effectModulator.animate(params));\n    this.composer.render(this.scene, this.camera);\n  }\n}\n\nexport {SceneManager};\n","class AudioAnalyser {\n  constructor() {\n    this.getAudioAnalyser().then(analyser => this.analyser = analyser);\n  }\n  async getAudioAnalyser() {\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    const context = new AudioContext();\n    const source = context.createMediaStreamSource(stream);\n    const analyser = context.createAnalyser();\n    analyser.fftSize = 512;\n    source.connect(analyser);\n    return analyser;\n  }\n  getSpectrum() {\n    let rawSpectrum = [];\n    if (this.analyser) {\n      rawSpectrum = new Uint8Array(this.analyser.frequencyBinCount);\n      this.analyser.getByteFrequencyData(rawSpectrum);\n    }\n    const spectrum = new Array(rawSpectrum.length);\n    rawSpectrum.forEach((value, index) => spectrum[index] = value / 255);\n    return {spectrum};\n  }\n  getWave() {\n    let rawWave = [];\n    if (this.analyser) {\n      rawWave = new Uint8Array(this.analyser.frequencyBinCount);\n      this.analyser.getByteTimeDomainData(rawWave);\n    }\n    const wave = new Array(rawWave.length);\n    rawWave.forEach((value, index) => wave[index] = value / 255);\n\n    const n = wave.length;\n    const squareSum = wave.reduce((total, sample) => total + (sample - .5)**2, 0);\n    const rms = n ? Math.sqrt(squareSum / n) : 0;\n\n    return {wave, rms};\n  }\n}\n\nexport {AudioAnalyser};\n","import React, {Component} from 'react';\nimport './App.css';\n\nimport {SceneManager} from './SceneManager';\nimport {AudioAnalyser} from './AudioAnalyser';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    this.state = {\n      width: 1,\n      height: 1,\n    }\n  }\n  render() {\n    return (\n      <canvas id=\"main\" ref={this.canvasRef}></canvas>\n    );\n  }\n  updateDimensions() {\n    this.setState({width: window.innerWidth, height: window.innerHeight});\n  }\n  componentDidMount(){\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n\n    const analyser = new AudioAnalyser();\n\n    const sceneManager = new SceneManager({\n      canvas:this.canvasRef.current,\n    });\n\n    const animate = () => {\n      this.animationFrameRequest = requestAnimationFrame(animate);\n      const {spectrum} = analyser.getSpectrum();\n      const {wave, rms} = analyser.getWave();\n      sceneManager.animate({\n        spectrum,\n        wave,\n        rms,\n        width: this.state.width,\n        height: this.state.height,\n      });\n    }\n    animate();\n  }\n  componentWillUnmount() {\n    if (this.animationFrameRequest) {\n      cancelAnimationFrame(this.animationFrameRequest);\n    }\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}